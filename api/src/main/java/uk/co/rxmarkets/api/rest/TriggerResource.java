package uk.co.rxmarkets.api.rest;

import io.smallrye.mutiny.Uni;
import io.vertx.core.eventbus.DeliveryOptions;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.mutiny.core.eventbus.EventBus;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.jboss.resteasy.reactive.RestQuery;
import uk.co.rxmarkets.model.EngineRequest;
import uk.co.rxmarkets.model.ranking.Opinion;
import uk.co.rxmarkets.model.ranking.Ranked;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;

@RequiredArgsConstructor
@Path("api/trigger")
@Slf4j
public class TriggerResource {

    private final EventBus bus;

    /**
     * A public-facing method that allows us to trigger the reading of static data, and
     * produces a Scoreboard instance based upon the data within.
     *
     * @return the Scoreboard generated by the EngineService on our data-set.
     */
    @GET
    public Uni<String> trigger(@RestQuery String equity) {
        final String exampleFile = equity + "-tweets.json";

        // Configure the delivery options with a higher timeout
        DeliveryOptions options = new DeliveryOptions().setSendTimeout(360_000); // 360,000 milliseconds (360 seconds)

        return bus.<JsonArray>request("tweets", exampleFile)
                .onItem().transform(message -> {
                    // Pull the dataset out from the static file of tweets.
                    final Set<Ranked> dataSet = new HashSet<>(message.body().size());
                    message.body().stream()
                            .filter(JsonObject.class::isInstance)
                            .map(JsonObject.class::cast)
                            .forEach(e -> {
                                final String source = e.getString("author");
                                final String data = e.getString("data");
                                dataSet.add(new Opinion(source, data));
                            });

                    // Trigger the engine to evaluate the dataset in all categories.
                    final String ticker = equity.toUpperCase(Locale.ROOT);
                    final EngineRequest request = new EngineRequest("XLON", ticker, dataSet);
                    bus.requestAndForget("evaluate", request, options);
                    return "OK";
                });
    }

}
